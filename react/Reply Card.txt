import React, { useState } from "react";
import "../styleComments.css";
import { Formik, Form, Field } from "formik";
import basicSchema from "schemas/commentsSchema";
import commentService from "services/commentService";
import Button from "react-bootstrap/Button";
import Dropdown from "react-bootstrap/Dropdown";
import Card from "react-bootstrap/Card";
import debug from "debug";
import propTypes from "prop-types";

const _logger = debug.extend("commentsReply");
const replySchema = basicSchema;

function ReplyCard(props) {
  const aReply = props.reply;
  const entityTypeId = props.entity.entityTypeId;
  const entityId = props.entity.entityId;
  const loggedInUser = props.userLoggedIn;
  const replyCreator = aReply.createdBy?.id;
  const replyUser = loggedInUser.id === replyCreator;
  const parentComment = props.parentComment;
  const formatDate = new Date(aReply.dateCreated).toLocaleString("en-US", {
    month: "long",
    day: "numeric",
    year: "numeric",
  });

  const [showEditForm, setShowEditForm] = useState(false);
  const [editReplyForm] = useState({
    id: aReply.id,
    subject: aReply.subject,
    text: aReply.text,
    parentId: parentComment.id,
    entityTypeId,
    entityId,
    isDeleted: false,
  });

  const onEditReplyClick = () => {
    _logger("Edit is firing");
    setShowEditForm(!showEditForm);
  };
  const onEditReplySubmit = (values) => {
    props.updateReplyHandler(values.id, values);

    setShowEditForm(!showEditForm);

    setEditReplyForm({
      id: aReply.id,
      subject: aReply.subject,
      text: "",
      parentId: parentComment.id,
      entityTypeId,
      entityId,
      isDeleted: false,
    });
  };

  const onDeleteReplyClick = () => {
    _logger("delete is firing");
    commentService
      .delete(aReply.id)
      .then(onDeleteReplySuccess)
      .catch(onDeleteReplyError);
  };
  const onDeleteReplySuccess = () => {
    _logger("Reply Delete Success", aReply.id);

    props.onReplyDelete(aReply.id);
  };
  const onDeleteReplyError = () => {
    _logger("Delete Reply Error");
  };

  return (
    <React.Fragment>
      <div className="reply-container">
        <div className="styleComponent-comment-user-info">
          <Card.Img
            className="styleComponent-user-image"
            variant="top"
            src={aReply.createdBy?.avatarUrl}
          />
          <p className="style-user-name">
            {aReply.createdBy?.firstName} {aReply.createdBy?.lastName}{" "}
          </p>
          <p className="styleComponent-comment-date-made">{formatDate}</p>
          {replyUser && (
            <Dropdown className="styleComponent-dropdown btn-sm">
              <Dropdown.Toggle id="dropdown-basic">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  fill="currentColor"
                  className="bi bi-three-dots-vertical"
                  viewBox="0 0 16 16"
                >
                  <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0" />
                </svg>
              </Dropdown.Toggle>

              <Dropdown.Menu>
                <button
                  className="btn btn-primary dropdown-item"
                  onClick={onEditReplyClick}
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    fill="currentColor"
                    className="bi bi-pencil"
                    viewBox="0 0 16 16"
                  >
                    <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325" />
                  </svg>
                  <span className="styleComponent-comment-dropdown-buttons">
                    Edit
                  </span>
                </button>
                <button
                  className="btn btn-primary dropdown-item"
                  onClick={onDeleteReplyClick}
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    fill="currentColor"
                    className="bi bi-trash3"
                    viewBox="0 0 16 16"
                  >
                    <path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5M11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47M8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5" />
                  </svg>
                  <span className="styleComponent-comment-dropdown-buttons">
                    Delete
                  </span>
                </button>
              </Dropdown.Menu>
            </Dropdown>
          )}
        </div>
        <div className="comment-body">
          {showEditForm ? (
            <div className="reply-form">
              <Formik
                enableReinitialize={true}
                initialValues={editReplyForm}
                onSubmit={onEditReplySubmit}
                validationSchema={replySchema}
              >
                <Form>
                  <Field className="form-control" name="text" type="text" />

                  <div className="button-style">
                    <Button
                      type="submit"
                      size="sm"
                      className="reply-button-style"
                    >
                      reply
                    </Button>
                    <Button size="sm" onClick={onEditReplyClick}>
                      Cancel
                    </Button>
                  </div>
                </Form>
              </Formik>
            </div>
          ) : (
            <div className="comment-info">
              <p className="text">{aReply.text}</p>
            </div>
          )}
        </div>
      </div>
    </React.Fragment>
  );
}

ReplyCard.propTypes = {
  reply: propTypes.shape({
    createdBy: propTypes.shape({
      id: propTypes.number.isRequired,
      avatarUrl: propTypes.string,
      firstName: propTypes.string.isRequired,
      lastName: propTypes.string.isRequired,
    }),
    subject: propTypes.string.isRequired,
    text: propTypes.string.isRequired,
    dateCreated: propTypes.string.isRequired,
    id: propTypes.number.isRequired,
  }),
  parentComment: propTypes.shape({
    createdBy: propTypes.shape({
      id: propTypes.number.isRequired,
      avatarUrl: propTypes.string,
      firstName: propTypes.string.isRequired,
      lastName: propTypes.string.isRequired,
    }),
    subject: propTypes.string.isRequired,
    text: propTypes.string.isRequired,
    dateCreated: propTypes.string.isRequired,
    id: propTypes.number.isRequired,
  }),
  entity: propTypes.shape({
    entityTypeId: propTypes.number.isRequired,
    entityId: propTypes.number.isRequired,
  }),
  userLoggedIn: propTypes.shape({
    id: propTypes.number.isRequired,
  }),
  onReplyDelete: propTypes.func,
  updateReplyHandler: propTypes.func,
  addReplyHandler: propTypes.func,
};
export default ReplyCard;
